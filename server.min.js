'use strict';const mdb_tcp=require('./modules/sw_modbus_tcp.min'),fetch=require('./modules/sw_fetch.min'),transform=require('./modules/sw_buffer_transform.min'),mess=require('./devices/socomec.json'),config=require('./package.json').config,MESS_TIME=process.env.MT||config.MESSTIME||1e3,BKUP_TIME=process.env.BT||config.BACKUP_TIME||15000,xonce=async(a,b)=>{let c=await mdb_tcp(a),d=await transform(b)(c);d.counter=counter++,env.push(d),config.IS_LOG&&console.log(d),setTimeout(()=>xonce(a,b),MESS_TIME)},backup=async()=>{for(config.IS_LOG&&console.log(env.length,out.length);env.length;)out.push(env.shift());config.IS_LOG&&console.log(env.length,out.length),await fetch(tcfg,JSON.stringify(out)),out=[],setTimeout(backup,BKUP_TIME)},scfg={host:process.argv[2]||process.env.IPE||'192.168.8.102',port:502,adr:mess.startadresse,length:mess.wortelesen},tcfg={host:process.env.IPR||'the-flow.7e14.starter-us-west-2.openshiftapps.com',port:80,path:`/rest/${process.env.TBL||'emgdata'}/_bulk`,method:'POST',auth:'',renc:!1,senc:!0,prot:'http'};let env=[],counter=0,out=[];config.IS_LOG&&console.log(`START mit ENV ${env.length} und OUT ${out.length} ${mess.startadresse}:${mess.wortelesen}`),setTimeout(()=>xonce(scfg,mess),MESS_TIME),setTimeout(backup,BKUP_TIME);

